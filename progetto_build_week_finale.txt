Occorre realizzare il backend di un sistema CRM per un'azienda fornitrice di energia, denominata "EPIC ENERGY SERVICES", che vuole gestire i contatti con i propri clienti business.


1) gruppetto
Il sistema, basato su Web Service REST Spring Boot e database PostgreSQL, 
deve permettere di gestire un elenco dei clienti, che sono caratterizzati dai seguenti dati:
-ragioneSociale
-partitaIva
-email
-dataInserimento
-dataUltimoContatto
-fatturatoAnnuale
-pec
-telefono
-emailContatto
-nomeContatto
-cognomeContatto
-telefonoContatto

Attributi di relazione
-indirizzo sede legale 
-indirizzo sede operativa

I clienti possono essere di vario tipo: <--- ENUM
PA
SAS
SPA
SRL

Ogni cliente puÃ² avere fino a due indirizzi, uno per la sede legale ed uno per la sede operativa.

Un indirizzo Ã¨ composto da 
-via
-civico
-localitÃ 
-cap
-comune 





2) gruppetto
I comuni sono gestiti attraverso un'anagrafica centralizza e sono caratterizzati da un nome e da un riferimento ad una provincia, anch'essa gestita in anagrafica centralizzata e caratterizzata da un nome ed una sigla. 

estrazione dati da vedere con rino ??!?!?!




3) gruppo
Associato ad ogni cliente c'Ã¨ un insieme di fatture. Le fatture sono caratterizzate dai seguenti dati:
anno : Integer
data : Date
importo : BigDecimal
numero : Integer

Ogni fattura ha uno stato. Gli stati fattura possono essere dinamici, in quanto in base all'evoluzione del business possono essere inseriti nel sistema nuovi stati.
un ENUM
inviata,ricevuta,pagata, da pagare, scaduta


implementare CRUD
Il back-end deve fornire al front-end tutte le funzioni necessarie a gestire in modo completo. (Aggiungere, modificare ed eliminare i suddetti elementi)


4) blocco di lavoro
Deve essere possibile ordinare i clienti per:
Nome
Fatturato annuale
Data di inserimento
Data di ultimo contatto
Provincia della sede legale <--- tripla tabella da interrogare


5) blocco di lavoro
Deve essere possibile filtrare la lista clienti per:
Fatturato annuale
Data di inserimento
Data di ultimo contatto
Parte del nome


6) blocco di lavoro
Deve essere possibile filtrare le fatture per
Cliente
Stato
Data
Anno
Range di importi

7) blocco di lavoro
Per gestire in modo efficiente un numero cospicuo di elementi, occorre utilizzare la paginazione.


8) JWT da implementare blocco di lavoro
Prevedere inoltre un sistema di autenticazione e autorizzazione basato su token JWT che permetta a diversi utenti di accedere alle funzioni del backend e di registrarsi al sistema. Un utente Ã¨ caratterizzato dalle seguenti proprietÃ :
username
email
password
nome
cognome

9) implementazione permessi
Gli utenti possono essere di tipo USER, abilitato alle sole operazioni di lettura, oppure ADMIN, abilitato a tutte le operazioni. Un utente può avere più ruoli.
da rivedere i permessi ai metodi.

10) implementazione permessi
* Importazione Comuni e Province
Viene fornito un elenco dei comuni in formato CSV (elenco-comuni-italiani.csv), che deve essere importato nel sistema per mezzo di una appositoa procedura Java da eseguire manualmente per popolare il db. Viene fornito inoltre un secondo file (elenco-province-italiane.csv) contenente la corrispondenza tra nome provincia e sigla ed anch'esso deve essere importato ed integrato con le informazioni relative ai comuni.

11) implementazione permessi
Contestualmente alla realizzazione del sistema occorre inoltre:
- Realizzare una collection Postman contenente tutte le chiamate alle API del servizio, comprese quelle di autenticazione
- implementazione permessi
- Implementare i principali test con JUnit